<?php

namespace App\Tests;

use ApiPlatform\Symfony\Bundle\Test\ApiTestCase;
use App\Entity\Answer;
use App\Entity\ApiToken;
use App\Entity\User;
use App\Factory\AnswerFactory;
use App\Factory\UserFactory;
use App\Repository\AnswerRepository;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Hautelook\AliceBundle\PhpUnit\RefreshDatabaseTrait;
use Symfony\Contracts\HttpClient\HttpClientInterface;

class AnswerTest extends ApiTestCase
{
    use RefreshDatabaseTrait;

    private const API_TOKEN = '9cb055b30d31b65a8847323a4f450d22e34e462181bbe0eaee132f4ee192866142c6d6363af1422d58f061ef74a9175a376269fce7e5461f645dea6a';

    private EntityManagerInterface $entityManager;
    private HttpClientInterface $client;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
//
//        $kernel = self::bootKernel();
//
//        $this->entityManager = $kernel->getContainer()
//            ->get('doctrine')
//            ->getManager();
        $this->client = $this->createClient();
        $this->entityManager = $this->client->getContainer()->get('doctrine')->getManager();
        $this->entityManager->flush();
        $user = (new User())
            ->setEmail('test@gmail.com')
            ->setFirstName('test')
            ->setPassword('$2y$13$gz6d1.jsEOkjEZTsm4RlRev2APC0EFPLK0hhbTAF6GVawW3g2.xhi');

        $this->entityManager->persist($user);
        $apiToken = new ApiToken();
        $apiToken->setToken(self::API_TOKEN);
        $apiToken->setUser($user);
        $this->entityManager->persist($apiToken);
        $this->entityManager->flush();
    }

    public function testGetCollection()
    {
        $resposne = $this->client->request('GET', '/api/answers', ['headers' => ['x-api-token' => self::API_TOKEN]]);

        $this->assertResponseIsSuccessful();

        $this->assertResponseHeaderSame(
            'content-type', 'application/ld+json; charset=utf-8'
        );

        $this->assertJsonContains([
            "hydra:view" => [
                "@id" => "/api/answers?page=1",
                "@type" => "hydra:PartialCollectionView",
                "hydra:first" => "/api/answers?page=1",
                "hydra:last" => "/api/answers?page=4",
                "hydra:next" => "/api/answers?page=2"
            ]
        ]);
        $this->assertCount(30, $resposne->toArray()['hydra:member']);
    }

    public function testPagination()
    {
        $resposne = $this->client->request('GET', '/api/answers?page=2', ['headers' => ['x-api-token' => self::API_TOKEN]]);

        $this->assertResponseIsSuccessful();

        self::assertResponseHeaderSame(
            'content-type', 'application/ld+json; charset=utf-8'
        );

        self::assertJsonContains([
            "hydra:view" => [
                "@id" => "/api/answers?page=2",
                "@type" => "hydra:PartialCollectionView",
                "hydra:first" => "/api/answers?page=1",
                "hydra:previous" => "/api/answers?page=1",
                "hydra:next" => "/api/answers?page=3"
            ]
        ]);
        self::assertCount(30, $resposne->toArray()['hydra:member']);
    }

    public function testCreateAnswer()
    {
        $this->client->request('POST', '/api/answers', [
            'json' => [
                "content" => "Test",
                "votes" => 5,
                "username" => "huy",
                "question" => "/api/questions/1"
            ], 'headers' => ['x-api-token' => self::API_TOKEN]
        ]);

        self::assertResponseStatusCodeSame(201);
        self::assertResponseHeaderSame(
            'content-type', 'application/ld+json; charset=utf-8'
        );

        self::assertJsonContains([
            "content" => "Test",
            "votes" => 5,
            "username" => "huy",
            "question" => array(
                '@id' => '/api/questions/1',
                '@type' => 'Question',
                'name' => 'Alice said very humbly; \'I won\'t have any rules.',
            ),
        ]);
    }

    public function testCreateInvalidAnswer()
    {
        $this->client->request('POST', '/api/answers', [
            'json' => [
                "content" => "Test",
                "votes" => 5,
                "username" => "",
                "question" => "/api/questions/1"
            ], 'headers' => ['x-api-token' => self::API_TOKEN]
        ]);

        self::assertResponseStatusCodeSame(422);
        self::assertResponseHeaderSame(
            'content-type', 'application/ld+json; charset=utf-8'
        );
    }

    public function testUpdateAnswer()
    {
        $this->client->request('PUT', '/api/answers/1', [
            'json' => [
                "content" => "Test updated",
            ], 'headers' => ['x-api-token' => self::API_TOKEN]
        ]);

        self::assertResponseStatusCodeSame(200);
        self::assertResponseHeaderSame(
            'content-type', 'application/ld+json; charset=utf-8'
        );

        self::assertJsonContains([
            "content" => "Test updated",
        ]);
    }

    public function testInvalidToken(): void
    {
        $resposne = $this->client->request('GET', '/api/answers', ['headers' => ['x-api-token' => '123sdad']]);

        $this->assertResponseStatusCodeSame(401);
        self::assertJsonContains([
            'message' => 'No token could be found.',
        ]);
    }

    public function testNoProvidedToken(): void
    {
        $resposne = $this->client->request('GET', '/api/answers');

        $this->assertResponseStatusCodeSame(401);
        self::assertJsonContains([
            'message' => 'Token not provided',
        ]);
    }
}
